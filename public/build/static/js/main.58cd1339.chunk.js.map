{"version":3,"sources":["components/ThankYouMessage.jsx","components/NotFoundPage.jsx","api/surveyRequest.js","actions/surveyTypes.js","components/QuestionsForm.jsx","actions/surveyActions.js","api/getUrlInfo.js","components/Survey.jsx","components/App.jsx","reportWebVitals.js","reducers/initialStates.js","reducers/surveyReducer.js","reducers/index.js","store/configureStore.js","index.js"],"names":["ThankYouMessage","Container","style","textAlign","marginTop","Typography","variant","color","NotFoundPage","gutterBottom","instance","axios","create","baseURL","SUCCESSFULL_SENT","QuestionsForm","qustionsArray","studentId","courseId","dispatch","useDispatch","resultObject","onChangeHandler","event","nam","target","name","trimNam","trim","val","value","handleclick","a","preventDefault","surveyRequest","post","successfull","data","type","surveyTypes","payload","console","log","map","item","direction","FormControl","component","FormLabel","questions","anonymous","RadioGroup","aria-label","question_id","answer","ans","FormControlLabel","label","control","Radio","onChange","Math","random","Button","onClick","margin","position","top","right","getUrlInfo","urlString","countSlash","firstString","secondString","i","length","toString","useStyles","makeStyles","theme","root1","width","intro","introtable","introRows","height","circular","left","button","spacing","Survey","classes","history","useHistory","ecodedUrl","useParams","decodedParams","atob","studentId_from_query","courseId_from_query","useState","studentName","setStudentName","metaData","setMetaData","courseName","setCourseName","setQuestionsArray","successfullSent","useSelector","state","survey","errorInfo","setErrorInfo","useEffect","replace","get","studentInfo","error","questionObj","course","firstName","familyName","phone","mobileNumber","email","to","disableGutters","className","align","CircularProgress","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","surveyReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58cd1339.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography, Container } from '@material-ui/core';\r\n\r\nexport default function ThankYouMessage() {\r\n    return (\r\n        <Container style={{textAlign: \"center\", marginTop:\"20%\", }}>\r\n            <Typography variant=\"h4\" color=\"primary\">\r\n            Thank you for taking part of this survey!!!\r\n            </Typography>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nexport default function NotFoundPage() {\r\n  return (\r\n    <div>\r\n    <Typography variant=\"h3\" \r\n    style={{textAlign: 'center', marginTop: \"20%\"}}\r\n     gutterBottom>\r\n       Oops Error 404 Page not found\r\n       </Typography>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://rt-test.xyz:3011\",\r\n  });\r\n  \r\n  export default instance; ","export const SUCCESSFULL_SENT = \"SUCCESSFULL_SENT\";\r\n","import React from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Container, Radio, RadioGroup, FormControlLabel ,FormControl ,FormLabel, Button } from '@material-ui/core';\r\nimport surveyRequest from '../api/surveyRequest';\r\nimport {setSuccessfullSent} from '../actions/surveyActions';\r\n\r\n\r\n\r\nexport default function QuestionsForm({qustionsArray,studentId,courseId}) {\r\n    const dispatch = useDispatch();\r\n    const resultObject = {};\r\n\r\n    const onChangeHandler = (event) =>{\r\n        let nam = event.target.name;\r\n        let trimNam = nam.trim();\r\n        let val = event.target.value; \r\n        resultObject[nam] = {trimNam, val, studentId,courseId}\r\n      }\r\n      \r\n      const handleclick = async (event) => {\r\n        event.preventDefault();\r\n        try{\r\n            const {data:{successfull}} = await surveyRequest.post('/rt-ed_survey', {resultObject});\r\n            dispatch(setSuccessfullSent(successfull))\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n      }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <form >\r\n                    {qustionsArray.map((item)=>{ \r\n                        return (\r\n                            <Container key={\"g\" + Math.random()} style={{direction: 'rtl',marginTop: \"5%\"}}>\r\n                            <FormControl component='div' >\r\n                                <FormLabel component='div' >{item.questions} {item.anonymous ? \"(Anonymous)\" : \"\"}</FormLabel>\r\n                                <RadioGroup aria-label={\"q\"+item.question_id} name={item.question_id+\" \"} style={{marginTop: '3%'}}>\r\n                                    {item.answer.map((ans)=>{\r\n                                        return (\r\n                                            <FormControlLabel value={ans.answer} label={ans.answer} key={\"d\" + Math.random()} control={<Radio />} onChange={onChangeHandler}/>\r\n                                        )\r\n                                    })}\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                            </Container>\r\n                        )\r\n                    })}\r\n                    <br /><Button \r\n                    type=\"submit\" \r\n                    variant=\"outlined\" \r\n                    color=\"primary\" \r\n                    onClick={handleclick}\r\n                    style={{margin: '5% ', \r\n                    position: 'relative', top: '5%', right: '-70%'\r\n                }}\r\n                    >\r\n                        Send Survey\r\n                    </Button>\r\n                </form>\r\n        </div>\r\n    )\r\n}\r\n","import * as surveyTypes from './surveyTypes';\r\n\r\nexport const setSuccessfullSent = (successfullSent) => {\r\n    return {\r\n      type: surveyTypes.SUCCESSFULL_SENT,\r\n      payload: successfullSent,\r\n    };\r\n  };","const getUrlInfo = (urlString ) => {\r\n    let countSlash = 0;\r\n    let firstString = \"\";\r\n    let secondString = \"\";\r\n    for (let i = 0; i < urlString.length; i++){\r\n        if(urlString[i] === '/'){\r\n            countSlash++;\r\n        }\r\n        if(countSlash === 3){\r\n            if(urlString[i].toString() !== '/') firstString += urlString[i].toString();\r\n        };\r\n        if(countSlash === 4){\r\n            if(urlString[i].toString() !== '/') secondString += urlString[i].toString();\r\n        }\r\n    }\r\n    return [firstString, secondString];\r\n}\r\n\r\nexport default getUrlInfo;","import React,{useEffect, useState} from 'react';\r\nimport { useHistory, useParams, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\"; \r\nimport { Typography, Container, CircularProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport QuestionsForm from './QuestionsForm';\r\nimport surveyRequest from '../api/surveyRequest';\r\nimport getUrlInfo from '../api/getUrlInfo'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root1: {\r\n    width:\"60%\",\r\n    },\r\n    intro: {\r\n      margin: \"3%\",\r\n      width: \"100%\"\r\n    },\r\n    introtable: {\r\n        width: \"100%\",\r\n        \r\n    },\r\n    introRows: {\r\n        height: \"50px\",\r\n    },\r\n    questions: {\r\n        width: \"100%\",\r\n        position: 'relative',\r\n        top: '95%',\r\n        right: '5%',\r\n    },\r\n    circular: {\r\n        position: \"absolute\",\r\n        top: '15%',\r\n        left: '45%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1, 1, 0, 0),\r\n      },\r\n  }));\r\n\r\n  \r\n\r\nexport default function Survey() {\r\n    let default_studentId = '0321732960';\r\n    let default_courseId = 300;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const {ecodedUrl} = useParams();\r\n    const decodedParams = atob(ecodedUrl).toString();\r\n    let [studentId_from_query,courseId_from_query] = getUrlInfo(decodedParams);\r\n    let studentId = studentId_from_query ? studentId_from_query : default_studentId;\r\n    let courseId = courseId_from_query ? courseId_from_query : default_courseId;\r\n    const [studentName, setStudentName] = useState('Student');\r\n    const [metaData, setMetaData] = useState({});\r\n    const [courseName, setCourseName] = useState('Real Time Group');\r\n    const [qustionsArray, setQuestionsArray] = useState([\"question1...\"]);\r\n    const { successfullSent } = useSelector((state) => state.survey);\r\n    const [errorInfo, setErrorInfo] = useState(false);\r\n   \r\n    \r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n          try {\r\n            successfullSent && history.replace(`/${ecodedUrl}/thanks`);\r\n            if(studentId === '032173296' && courseId === 30) { // if the parameters are the defalted ones\r\n                setErrorInfo(true)\r\n            } else {\r\n                const {data:{studentInfo , error}} = await surveyRequest.get(`/studetInfo/${studentId}`);\r\n                if(error) {\r\n                    setErrorInfo(true)\r\n                } else {\r\n                    const {data: {questionObj,  course, error}}  = await surveyRequest.get(`/rt-ed_survey/${studentId}/${courseId}`);\r\n                    if(error){\r\n                        setErrorInfo(true)\r\n                    } else {\r\n                        setQuestionsArray(questionObj);\r\n                        setStudentName(`${studentInfo[0][0].firstName} ${studentInfo[0][0].familyName}`);\r\n                        setMetaData({phone: studentInfo[0][0].mobileNumber, email: studentInfo[0][0].email});\r\n                        setCourseName(course[0][0].courseName);\r\n                    }\r\n                    \r\n                };\r\n            }\r\n            \r\n            \r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        })();\r\n      }, [successfullSent, history, studentId,courseId,ecodedUrl]);\r\n\r\n         \r\n    return (\r\n        <Container>\r\n            {errorInfo ? (<Redirect to={`${ecodedUrl}/page404`} />) : \r\n            (qustionsArray.length > 1 ?\r\n            <Container disableGutters className={classes.root1}>\r\n            <Typography variant=\"h4\" align=\"center\" color=\"primary\">Survey for course {courseName}</Typography>\r\n            <Container className={classes.intro}>\r\n            <table className={classes.introtable}>\r\n                <tbody>\r\n                <tr className={classes.introRows}>\r\n                    <td ><Typography color=\"primary\">Course Name: {courseName}</Typography></td>\r\n                    \r\n                </tr>\r\n                <tr className={classes.introRows}>\r\n                    <td><Typography color=\"primary\">Student Name: {studentName}</Typography></td>\r\n                    <td><Typography color=\"primary\">EMAIL: {metaData.email}</Typography></td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            </Container>  {/* end of intro container */}\r\n\r\n            <Container >\r\n\r\n            <QuestionsForm\r\n            //  className={classes.questions}\r\n                qustionsArray = {qustionsArray}\r\n                studentId = {studentId} \r\n                courseId = {courseId}\r\n               />\r\n            </Container>\r\n         </Container> : <CircularProgress className={classes.circular} variant=\"determinate\" value={75}/>)}\r\n         </Container>\r\n    )\r\n}","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport ThankYouMessage from './ThankYouMessage';\nimport NotFoundPage from './NotFoundPage';\nimport { Container } from '@material-ui/core';\nimport Survey from './Survey';\n\n\n\nfunction App() {\n  return (\n    <Container>\n    <Switch>\n    <Route exact path=\"/:ecodedUrl\"><Survey /></Route>\n    <Route exact path=\"/:ecodedUrl/thanks\"><ThankYouMessage /></Route>\n    <Route exact path=\"/:ecodedUrl/page404\"><NotFoundPage /></Route>\n    </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n// aHR0cDovL2xvY2FsaG9zdDozMDAwLzAzMjE3MzI5Ni85  => good path","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const initialState = {\r\n    survey: {\r\n      successfullSent: false,\r\n      \r\n    }\r\n  };\r\n  ","import * as surveyTypes from '../actions/surveyTypes';\r\nimport {initialState} from './initialStates';\r\n\r\nconst surveyReducer = (state = initialState.survey, action) => {\r\n    switch (action.type) {\r\n      case surveyTypes.SUCCESSFULL_SENT:\r\n        return {\r\n          ...state,\r\n          successfullSent: action.payload,\r\n        };\r\n    \r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default surveyReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport surveyReducer from './surveyReducer';\r\n\r\nexport default combineReducers({ \r\n    survey: surveyReducer,\r\n    \r\n  });","import { createStore, applyMiddleware } from \"redux\"; \r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\"; \r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider as StoreProvider } from \"react-redux\";\nimport {store} from './store/configureStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <StoreProvider store={store} >\n    <App />\n    </StoreProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}