{"version":3,"sources":["components/ThankYouMessage.jsx","components/NotFoundPage.jsx","components/DefaultSurvey.jsx","api/surveyRequest.js","components/SubmitButton.jsx","actions/surveyTypes.js","components/QuestionsForm.jsx","actions/surveyActions.js","api/getUrlInfo.js","components/Survey.jsx","components/App.jsx","reportWebVitals.js","reducers/initialStates.js","reducers/surveyReducer.js","reducers/index.js","store/configureStore.js","index.js"],"names":["ThankYouMessage","Container","style","textAlign","marginTop","Typography","variant","color","NotFoundPage","gutterBottom","DefaultSurvey","instance","axios","create","baseURL","SubmitButton","handleclick","Button","type","onClick","event","margin","position","top","right","SUCCESSFULL_SENT","useStyles","makeStyles","theme","nonAswered","backgroundColor","QuestionsForm","qustionsArray","studentId","courseId","dispatch","useDispatch","useState","answeredObj","setAnsweredObj","answeredQuestionObj","i","length","question_id","resultObject","onChangeHandler","nam","target","name","trimNam","trim","val","value","a","preventDefault","unAnsweredArray","countAnsweredQuestions","surveyRequest","post","successfull","data","successfullSent","console","log","surveyTypes","payload","window","location","hash","obj","countTrue","property","push","map","item","inx","direction","FormControl","component","id","FormLabel","questions","Anonymous","RadioGroup","aria-label","answer","ans","FormControlLabel","label","control","Radio","onChange","Math","random","getUrlInfo","urlString","countSlash","firstString","secondString","toString","root1","width","intro","introtable","introRows","height","circular","left","button","spacing","Survey","classes","history","useHistory","ecodedUrl","useParams","decodedParams","atob","studentName","setStudentName","metaData","setMetaData","courseName","setCourseName","setQuestionsArray","useSelector","state","survey","errorInfo","setErrorInfo","useEffect","replace","get","studentInfo","error","questionObj","course","firstName","familyName","phone","mobileNumber","email","to","disableGutters","className","align","CircularProgress","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","surveyReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f185b2f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography, Container } from '@material-ui/core';\r\n\r\nexport default function ThankYouMessage() {\r\n    return (\r\n        <Container style={{textAlign: \"center\", marginTop:\"20%\", }}>\r\n            <Typography variant=\"h4\" color=\"primary\">\r\n            Thank you for taking part of this survey!!!\r\n            </Typography>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nexport default function NotFoundPage() {\r\n  return (\r\n    <div>\r\n    <Typography variant=\"h3\" \r\n    style={{textAlign: 'center', marginTop: \"20%\"}}\r\n     gutterBottom>\r\n       Oops Error 404 Page not found\r\n       </Typography>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nexport default function DefaultSurvey() {\r\n    \r\n    return (\r\n        <div>\r\n        <Typography variant=\"h3\" \r\n        style={{textAlign: 'center', marginTop: \"20%\"}}\r\n         gutterBottom>\r\n           wellcome to RT-ED Survey\r\n           </Typography>\r\n          \r\n        </div>\r\n      )\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://rt-test.xyz:3099\",\r\n  });\r\n  \r\n  export default instance; ","import React from 'react';\r\nimport {  Button } from '@material-ui/core';\r\n\r\n\r\nexport default function SubmitButton({handleclick}) {\r\n    return (\r\n        <div>\r\n            <Button \r\n                    type=\"submit\" \r\n                    variant=\"outlined\" \r\n                    color=\"primary\" \r\n                    onClick={(event)=> handleclick(event)}   \r\n                    style={{margin: '5% ', \r\n                    position: 'relative', top: '5%', right: '-70%'\r\n                }}\r\n                    >\r\n                        Send Survey\r\n                    </Button>\r\n        </div>\r\n    )\r\n}\r\n","export const SUCCESSFULL_SENT = \"SUCCESSFULL_SENT\";\r\n","import React,{useState, useEffect} from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Container, Radio, RadioGroup, FormControlLabel ,FormControl ,FormLabel,  Typography } from '@material-ui/core';\r\nimport surveyRequest from '../api/surveyRequest';\r\nimport SubmitButton from './SubmitButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {setSuccessfullSent} from '../actions/surveyActions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n \r\n    nonAswered: {\r\n        backgroundColor: 'red',\r\n    },\r\n  \r\n  }));\r\n\r\n\r\nexport default function QuestionsForm({qustionsArray,studentId,courseId}) {\r\n    const dispatch = useDispatch();\r\n    // const [unAnsweredArray, setUnAnsweredArray] = useState([]);\r\n    const [answeredObj, setAnsweredObj] = useState({});\r\n    const [stage, setStage] = useState('first')\r\n    const classes = useStyles();\r\n    let clickNum = 0;\r\n\r\n    let answeredQuestionObj = {};\r\n    for (let i = 0; i < qustionsArray.length; i++){\r\n        answeredQuestionObj[qustionsArray[i].question_id] = false;\r\n\r\n    }\r\n    const resultObject = {};\r\n    const onChangeHandler = (event) =>{\r\n        let nam = event.target.name;\r\n        let trimNam = nam.trim();\r\n        let val = event.target.value; \r\n        \r\n        resultObject[nam] = {trimNam, val, studentId,courseId}\r\n       \r\n        answeredQuestionObj[trimNam] = true;\r\n      }\r\n      \r\n      const handleclick = async (event) => {\r\n        event.preventDefault();\r\n        try{\r\n            setAnsweredObj({...answeredObj,resultObject})\r\n            let unAnsweredArray = countAnsweredQuestions(answeredQuestionObj) ;\r\n            if(unAnsweredArray.length === 0) {\r\n                const {data:{successfull}} = await surveyRequest.post('/rt-ed_survey', {resultObject});\r\n                dispatch(setSuccessfullSent(successfull))\r\n            } else {\r\n                console.log('not all questions replied!!!!', unAnsweredArray)\r\n                \r\n                window.location.hash = unAnsweredArray[0];\r\n            }\r\n            \r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n      }\r\n     \r\n\r\n      const handleSecondclick = async (event) => {\r\n\r\n      }\r\n    const countAnsweredQuestions = (obj) =>{\r\n        let countTrue =[];\r\n        for (let property in obj){\r\n            if(!obj[property]){\r\n                countTrue.push(property)\r\n            } \r\n        }\r\n        return countTrue;\r\n    }\r\n    return (\r\n        <div>\r\n            <form >\r\n                    {qustionsArray.map((item, inx)=>{ \r\n                        return (\r\n                            <Container key={\"g\" + Math.random()} style={{direction: 'rtl',marginTop: \"5%\"}}>\r\n                            <FormControl \r\n                             component='div' id={item.question_id}>\r\n                                <FormLabel component='div'><Typography variant='span' color='secondary'>{inx+1})</Typography> {item.questions} {item.Anonymous ? \"(Anonymous)\" : \"\"}</FormLabel>\r\n                                <RadioGroup aria-label={\"q\"+item.question_id} name={item.question_id+\" \"} style={{marginTop: '3%'}}>\r\n                                    {item.answer.map((ans)=>{\r\n                                        return (\r\n                                            <FormControlLabel \r\n                                                // checked={answeredObj.resultObject ? (answeredObj.resultObject[item.question_id].val === ans.answer ? answeredObj.resultObject[item.question_id].val : \"\") : \"\"}\r\n                                                value={ans.answer} \r\n                                                label={ans.answer} \r\n                                                key={\"d\" + Math.random()} \r\n                                                control={<Radio />}\r\n                                                onChange={onChangeHandler}/>\r\n                                        )\r\n                                    })}\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                            </Container>\r\n                        )\r\n                    })}\r\n                    <br />\r\n                    <SubmitButton  \r\n                    handleclick={handleclick}\r\n                    />\r\n                    {/* <Button \r\n                    type=\"submit\" \r\n                    variant=\"outlined\" \r\n                    color=\"primary\" \r\n                    onClick={clickNum === 0 ? handleclick : handleSecondclick}\r\n                    style={{margin: '5% ', \r\n                    position: 'relative', top: '5%', right: '-70%'\r\n                }}\r\n                    >\r\n                        Send Survey\r\n                    </Button> */}\r\n                </form>\r\n        </div>\r\n    )\r\n}\r\n","import * as surveyTypes from './surveyTypes';\r\n\r\nexport const setSuccessfullSent = (successfullSent) => {\r\n  console.log('action', successfullSent)\r\n    return {\r\n      type: surveyTypes.SUCCESSFULL_SENT,\r\n      payload: successfullSent,\r\n    };\r\n  };","const getUrlInfo = (urlString ) => {\r\n    let countSlash = 0;\r\n    let firstString = \"\";\r\n    let secondString = \"\";\r\n    for (let i = 0; i < urlString.length; i++){\r\n        if(urlString[i] === '/'){\r\n            countSlash++;\r\n        }\r\n        if(countSlash === 3){\r\n            if(urlString[i].toString() !== '/') firstString += urlString[i].toString();\r\n        };\r\n        if(countSlash === 4){\r\n            if(urlString[i].toString() !== '/') secondString += urlString[i].toString();\r\n        }\r\n    }\r\n    return [firstString, secondString];\r\n}\r\n\r\nexport default getUrlInfo;","import React,{useEffect, useState} from 'react';\r\nimport { useHistory, useParams, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\"; \r\nimport { Typography, Container, CircularProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport QuestionsForm from './QuestionsForm';\r\nimport surveyRequest from '../api/surveyRequest';\r\nimport getUrlInfo from '../api/getUrlInfo'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root1: {\r\n    width:\"60%\",\r\n    },\r\n    intro: {\r\n      margin: \"3%\",\r\n      width: \"100%\"\r\n    },\r\n    introtable: {\r\n        width: \"100%\",\r\n        \r\n    },\r\n    introRows: {\r\n        height: \"50px\",\r\n    },\r\n    questions: {\r\n        width: \"100%\",\r\n        position: 'relative',\r\n        top: '95%',\r\n        right: '5%',\r\n    },\r\n    // nonAswered: {\r\n    //     backgroundColor: 'red',\r\n    // },\r\n    circular: {\r\n        position: \"absolute\",\r\n        top: '15%',\r\n        left: '45%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1, 1, 0, 0),\r\n      },\r\n  }));\r\n\r\n  \r\n\r\nexport default function Survey() {\r\n    // let default_studentId = '0321732960';\r\n    // let default_courseId = 300;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const {ecodedUrl} = useParams();\r\n    const decodedParams = atob(ecodedUrl).toString();\r\n    console.log('decodedParams',decodedParams)\r\n    let [studentId,courseId] = getUrlInfo(decodedParams);\r\n    console.log('getUrlInfo',studentId,courseId)\r\n    // let studentId = studentId_from_query ? studentId_from_query : default_studentId;\r\n    // let courseId = courseId_from_query ? courseId_from_query : default_courseId;\r\n    const [studentName, setStudentName] = useState('Student');\r\n    const [metaData, setMetaData] = useState({});\r\n    const [courseName, setCourseName] = useState('Real Time Group');\r\n    const [qustionsArray, setQuestionsArray] = useState([\"question1...\"]);\r\n    const { successfullSent } = useSelector((state) => state.survey);\r\n    const [errorInfo, setErrorInfo] = useState(false);\r\n   \r\n    const [show, setShow] = useState(true);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n          try {\r\n              console.log('successfullSent',successfullSent)\r\n            successfullSent && history.replace(`/${ecodedUrl}/thanks`);\r\n            if(!studentId || !courseId ) {\r\n                setErrorInfo(true)\r\n            } else {\r\n                const {data:{studentInfo , error}} = await surveyRequest.get(`/studetInfo/${studentId}`);\r\n                if(error) {\r\n                    setErrorInfo(true)\r\n                } else {\r\n                    const {data: {questionObj,  course, error}}  = await surveyRequest.get(`/rt-ed_survey/${studentId}/${courseId}`);\r\n                    if(error){\r\n                        setErrorInfo(true)\r\n                    } else {\r\n                        setQuestionsArray(questionObj);\r\n                        setStudentName(`${studentInfo[0][0].firstName} ${studentInfo[0][0].familyName}`);\r\n                        setMetaData({phone: studentInfo[0][0].mobileNumber, email: studentInfo[0][0].email});\r\n                        setCourseName(course[0][0].courseName);\r\n                    }\r\n                    \r\n                };\r\n            }\r\n            \r\n            \r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        })();\r\n      }, [successfullSent, history, studentId,courseId,ecodedUrl]);\r\n\r\n         \r\n    return (\r\n        <Container>\r\n            {errorInfo ? (<Redirect to={`${ecodedUrl}/page404`} />) : \r\n            (qustionsArray.length > 1 ?\r\n            <Container disableGutters className={classes.root1}>\r\n            <Typography variant=\"h4\" align=\"center\" color=\"primary\">Survey for course {courseName}</Typography>\r\n            <Container className={classes.intro}>\r\n            <table className={classes.introtable}>\r\n                <tbody>\r\n                <tr className={classes.introRows}>\r\n                    <td ><Typography color=\"primary\">Course Name: {courseName}</Typography></td>\r\n                    \r\n                </tr>\r\n                <tr className={classes.introRows}>\r\n                    <td><Typography color=\"primary\">Student Name: {studentName}</Typography></td>\r\n                    <td><Typography color=\"primary\">EMAIL: {metaData.email}</Typography></td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            </Container>  {/* end of intro container */}\r\n\r\n            <Container >\r\n\r\n            {show ? \r\n            <QuestionsForm\r\n            //  className={classes.questions}\r\n                qustionsArray = {qustionsArray}\r\n                studentId = {studentId} \r\n                courseId = {courseId}\r\n               /> : \r\n            <QuestionsForm \r\n            qustionsArray = {qustionsArray}\r\n            studentId = {studentId} \r\n            courseId = {courseId}\r\n            />}\r\n            </Container>\r\n         </Container> : <CircularProgress className={classes.circular} variant=\"determinate\" value={75}/>)}\r\n         </Container>\r\n    )\r\n}","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport ThankYouMessage from './ThankYouMessage';\nimport NotFoundPage from './NotFoundPage';\nimport DefaultSurvey from './DefaultSurvey'\nimport { Container } from '@material-ui/core';\nimport Survey from './Survey';\n\n\n\nfunction App() {\n  return (\n    <Container>\n    <Switch>\n    <Route exact path=\"/\"><DefaultSurvey /></Route>\n    <Route exact path=\"/:ecodedUrl\"><Survey /></Route>\n    <Route exact path=\"/:ecodedUrl/thanks\"><ThankYouMessage /></Route>\n    <Route exact path=\"/:ecodedUrl/page404\"><NotFoundPage /></Route>\n    </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n// aHR0cDovL2xvY2FsaG9zdDozMDAwLzAzMjE3MzI5Ni85  => good path","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const initialState = {\r\n    survey: {\r\n      successfullSent: false,\r\n      \r\n    }\r\n  };\r\n  ","import * as surveyTypes from '../actions/surveyTypes';\r\nimport {initialState} from './initialStates';\r\n\r\nconst surveyReducer = (state = initialState.survey, action) => {\r\n    switch (action.type) {\r\n      case surveyTypes.SUCCESSFULL_SENT:\r\n        return {\r\n          ...state,\r\n          successfullSent: action.payload,\r\n        };\r\n    \r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default surveyReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport surveyReducer from './surveyReducer';\r\n\r\nexport default combineReducers({ \r\n    survey: surveyReducer,\r\n    \r\n  });","import { createStore, applyMiddleware } from \"redux\"; \r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\"; \r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider as StoreProvider } from \"react-redux\";\nimport {store} from './store/configureStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <StoreProvider store={store} >\n    <App />\n    </StoreProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}